#!/usr/bin/python
import curses
from somaplayer import Somaplayer
from time import sleep
from datetime import datetime

configuration_file = "config.json"

msgs = []
def log(msg):
    msgs.append(msg)


class Content:
    def __init__(self):
        self.offset = 0
        self.selected = 0
        self.data = []

    def set_data(self, data):
        self.data = data

    def offset_add(self, vector):
        self.offset += vector
        if self.offset < 0:
            self.offset = 0
        elif self.offset > len(self.data) - 1:
            self.offset = len(self.data) - 1

    def selected_add(self, vector):
        self.selected += vector
        if self.selected < 0:
            self.selected = 0
        elif self.selected > len(self.data) - 1:
            self.selected = len(self.data) - 1


class Window:
    def pad_string(self, text):
        return text.ljust(self.width," ")[:self.width]

    def set_text(self, text, line, mode=curses.A_NORMAL):
        self.window.addstr(line, 0, text[:self.width], mode)

    def refresh(self):
        self.window.refresh()

    def getch(self):
        return self.window.getch()


class TitleWindow(Window):
    def __init__(self, parent):
        self.width = parent.width
        self.window = parent.create_window(1, self.width, 0, 0)

    def set_text(self, text):
        Window.set_text(self, self.pad_string(text), 0, curses.A_REVERSE | curses.A_BOLD)


class FooterWindow(Window):
    def __init__(self, parent):
        self.width = parent.width
        self.window = parent.create_window(1, self.width, parent.height - 1, 0)

    def set_text(self, text):
        Window.set_text(self, self.pad_string(text), 0, curses.A_REVERSE)


class ContentWindow(Window):
    def __init__(self, parent):
        self.width = parent.width
        self.height = parent.height - 2
        self.window = parent.create_window(self.height, self.width, 1, 0)

    def render_content(self, content):
        self.window.clear()

        if content.selected - content.offset > self.height - 1:
            content.offset = content.selected - self.height + 1
        elif content.selected - content.offset <= 0:
            content.offset = content.selected 

        start = content.offset
        end = start + self.height

        for line_no, line in enumerate(content.data[start:end]):
            if line_no + start  == content.selected:
                mode = curses.A_REVERSE
            else:
                mode = curses.A_NORMAL
            Window.set_text(self, self.pad_string(line[:self.width]), line_no, mode)


class SomaUI:
    def create_window(self, height, width, x, y):
        window = curses.newwin(height, width + 1, x, y)
        window.keypad(True)
        return window

    def main(self, stdscr, player):
        self.player = player
        curses.curs_set(False)
        self.height, self.width = stdscr.getmaxyx()

        self.title = TitleWindow(self)
        self.footer = FooterWindow(self)
        self.main = ContentWindow(self)

        self.title.set_text("PYSOMA: The CLI Soma FM streamplayer (with Python & mplayer)")
        self.footer.set_text("c:show stations, ENTER=select station, j/k: move up/down, q:quit")

        stations = [station['name'] for station in player.stations]
        history = player.history

        self.content = Content()
        self.content.set_data(stations)
        player.set_call_back(self.update_display)
        self.update_display()

        while True:
            key = self.main.getch()
            if key in [curses.KEY_ENTER, ord('\n')]: # Select
                if self.content.data == stations:
                    index = self.content.selected
                    self.title.set_text("{0}: {1}".format(player.stations[index]['name'], player.stations[index]['description']))
                    player.play(index)
                    self.content.set_data(history)
                    self.update_display()
            
            elif key == curses.KEY_RESIZE:
                log("Window resized: ")
                log(stdscr.getmaxyx())

            elif key == ord('c'):
                self.content.set_data(stations)
                self.update_display()

            elif key in [curses.KEY_UP, ord('j')]: # Up
                self.content.selected_add(-1)
                self.update_display()
            
            elif key in [curses.KEY_DOWN, ord('k')]: # Down
                self.content.selected_add(1)
                self.update_display()
            
            elif key in [336, ord('K')]: # Shift up
                self.content.offset_add(-1)
                self.update_display()
            
            elif key in [337, ord('J')]: # Shift down
                self.content.offset_add(1)
                self.update_display()
            
            elif key in [565]: # Control up
                self.content.selected_add(-self.main.height  + 1)
                self.update_display()
            
            elif key in [524]: # Control down
                self.content.selected_add(self.main.height - 1)
                self.update_display()
            
            elif key == 27:
                if self.content.data == stations:
                    self.content.set_data(history)
                    self.update_display()
                else:
                    player.stop()
                    break

            elif key == ord('q'): # Quit
                player.stop()
                break


    def update_display(self):
        self.main.render_content(self.content)

        self.title.refresh()
        self.main.refresh()
        self.footer.refresh()


if __name__ == "__main__":
    try:
        ui = SomaUI()
        player = Somaplayer(configuration_file)
        curses.wrapper(ui.main, player)

    except KeyboardInterrupt:
        log("KeyboardInterrupt!")
        pass

    finally:
        if len(msgs) > 0:
            print "*" * 80
            print 
            for msg in msgs:
                print msg
            print
            print "*" * 80
